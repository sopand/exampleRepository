# 기본 설정 블록
user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

# HTTP 설정 블록
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # 서버 블록
    server {
        # 포트 80에서 들어오는 HTTP 요청을 수신하도록 설정
        listen 80;

        # HTTP 요청을 HTTPS로 리디렉션
        return 301 https://$host$request_uri;
    }

    # HTTPS 서버 블록
    server {
        # 포트 443에서 들어오는 HTTPS 요청을 수신하도록 설정
        listen 443 ssl;

        # SSL 인증서 경로 설정
        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/privkey.pem;

        # 이 서버 블록이 처리할 도메인 이름을 정의
        server_name ti-me.co.kr;

        # /api로 시작하는 요청을 처리하는 블록
        location /api {
            # /api 요청을 동일한 서버의 8080 포트로 전달 (Spring 백엔드)
            proxy_pass https://172.17.0.1:8080;

            # 원본 요청의 Host 헤더를 설정하여 백엔드 서비스로 전달
            proxy_set_header Host $host;

            # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
            proxy_set_header X-Real-IP $remote_addr;

            # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        location /v3 {
                    # /api 요청을 동일한 서버의 8080 포트로 전달 (Spring 백엔드)
                    proxy_pass https://172.17.0.1:8080;

                    # 원본 요청의 Host 헤더를 설정하여 백엔드 서비스로 전달
                    proxy_set_header Host $host;

                    # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
                    proxy_set_header X-Real-IP $remote_addr;

                    # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                    # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
                    proxy_set_header X-Forwarded-Proto $scheme;
                }

	 
        location /login {
            # /api 요청을 동일한 서버의 8080 포트로 전달 (Spring 백엔드)
            proxy_pass https://172.17.0.1:8080;

            # 원본 요청의 Host 헤더를 설정하여 백엔드 서비스로 전달
            proxy_set_header Host $host;

            # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
            proxy_set_header X-Real-IP $remote_addr;

            # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
            proxy_set_header X-Forwarded-Proto $scheme;
        }




	location /swagger {
            # /api 요청을 동일한 서버의 8080 포트로 전달 (Spring 백엔드)
            proxy_pass https://172.17.0.1:8080;

            # 원본 요청의 Host 헤더를 설정하여 백엔드 서비스로 전달
            proxy_set_header Host $host;

            # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
            proxy_set_header X-Real-IP $remote_addr;

            # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
            proxy_set_header X-Forwarded-Proto $scheme;
        }



        location /oauth2 {
            # /api 요청을 동일한 서버의 8080 포트로 전달 (Spring 백엔드)
            proxy_pass https://172.17.0.1:8080;

            # 원본 요청의 Host 헤더를 설정하여 백엔드 서비스로 전달
            proxy_set_header Host $host;

            # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
            proxy_set_header X-Real-IP $remote_addr;

            # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
            proxy_set_header X-Forwarded-Proto $scheme;
        }




        # 나머지 모든 요청을 처리하는 블록 (프론트엔드)
        location / {
            # 모든 다른 요청을 동일한 서버의 3000 포트로 전달 (프론트엔드)
            proxy_pass http://172.17.0.1:3000;

            # 원본 요청의 Host 헤더를 설정하여 프론트엔드 서비스로 전달
            proxy_set_header Host $host;

            # 클라이언트의 실제 IP 주소를 X-Real-IP 헤더로 설정
            proxy_set_header X-Real-IP $remote_addr;

            # 요청을 전달한 IP 주소 목록을 X-Forwarded-For 헤더로 설정
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 원본 요청의 프로토콜 (http 또는 https)을 X-Forwarded-Proto 헤더로 설정
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

